pipeline {
  agent any
  stages {
    stage('Build') {
      steps {
        // Use Maven to build the code
        sh 'mvn clean package'
      }
    }
    stage('Unit and Integration Tests') {
      steps {
        // Use JUnit and/or TestNG for unit tests, and a tool like Selenium for integration tests
        sh 'mvn test'
      }
    }
    stage('Code Analysis') {
      steps {
        // Use a code analysis tool like SonarQube or Checkstyle to analyze the code
        // This assumes you have a SonarQube server running at http://localhost:9000
        withSonarQubeEnv('SonarQube') {
          sh 'mvn sonar:sonar'
        }
      }
    }
    stage('Security Scan') {
      steps {
        // Use a security scanning tool like OWASP ZAP or SonarQube
        // This assumes you have a ZAP scanner running at http://localhost:8090
        sh 'mvn -Psecurity -DzapProxyUrl=http://localhost:8090 clean verify'
      }
    }
    stage('Deploy to Staging') {
      steps {
        // Use a tool like AWS CLI to deploy the code to a staging server
        // This assumes you have configured AWS credentials in Jenkins
        sh 'aws s3 cp myapp.war s3://my-staging-bucket/myapp.war'
      }
    }
    stage('Integration Tests on Staging') {
      steps {
        // Use the same integration testing tool as before, but point it to the staging environment
        sh 'mvn verify -Dtest.env=staging'
      }
    }
    stage('Deploy to Production') {
      steps {
        // Use AWS CLI again to deploy the code to a production server
        sh 'aws s3 cp myapp.war s3://my-production-bucket/myapp.war'
      }
    }
  }
  post {
    always {
      // Send email notifications with status and logs
      emailext (
        subject: "Pipeline Status: ${currentBuild.result}",
        body: "Pipeline finished with status: ${currentBuild.result}. Please see attached logs.",
        attachmentsPattern: '**/*.log',
        to: 'shariq.saleem06@gmail.com'
      )
    }
  }
}
